{"version":3,"sources":["components/photo/photo.jpg","components/header/DefaultHeader.jsx","components/navigation-link/NavigationLink.jsx","components/navigation/Navigation.jsx","components/shared/blank-target-link/BlankTargetLink.jsx","components/shared/blank-target-icon-link/BlankTargetIconLink.jsx","components/footer/Footer.jsx","components/page/Page.jsx","components/photo/Photo.jsx","components/home/Home.jsx","components/work/Work.jsx","components/shared/links-list/LinksList.jsx","components/shared/links-list-item/LinksListItem.jsx","components/showcase/Showcase.jsx","components/publications/Publications.jsx","components/App.jsx","serviceWorker.js","index.js"],"names":["module","exports","DefaultHeader","className","NavigationLink","props","activeClassName","exact","children","Navigation","to","BlankTargetLink","rel","target","BlankTargetIconLink","href","name","icon","title","Footer","Page","header","Photo","src","photo","alt","Home","Work","LinksList","Array","isArray","map","child","key","LinksListItem","link","Showcase","Publications","App","basename","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.37c75291.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/photo.f2d6d38c.jpg\";","import React from 'react';\n\nimport './DefaultHeader.scss';\n\nconst DefaultHeader = () => {\n  return <h1 className=\"default-header\">John's Profile</h1>;\n};\n\nexport default DefaultHeader;\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nconst NavigationLink = props => {\n  return (\n    <NavLink activeClassName=\"active\" exact={true} {...props}>\n      {props.children}\n    </NavLink>\n  );\n};\n\nexport default NavigationLink;\n","import React from 'react';\n\nimport NavigationLink from '../navigation-link/NavigationLink';\n\nimport './Navigation.scss';\n\nconst Navigation = () => {\n  return (\n    <nav className=\"navigation\">\n      <ul>\n        <li>\n          <NavigationLink to=\"/\">Home</NavigationLink>\n        </li>\n        <li>\n          <NavigationLink to=\"/work\">Work</NavigationLink>\n        </li>\n        <li>\n          <NavigationLink to=\"/showcase\">Showcase</NavigationLink>\n        </li>\n        <li>\n          <NavigationLink to=\"/publications\">Publications</NavigationLink>\n        </li>\n      </ul>\n    </nav>\n  );\n};\n\nexport default Navigation;\n","import React from 'react';\n\nconst BlankTargetLink = props => {\n  return (\n    <a rel=\"noopener noreferrer\" target=\"_blank\" {...props}>\n      {props.children}\n    </a>\n  );\n};\n\nexport default BlankTargetLink;\n","import React from 'react';\n\nimport BlankTargetLink from '../blank-target-link/BlankTargetLink';\n\nconst BlankTargetIconLink = props => {\n  return (\n    <BlankTargetLink href={props.href}>\n      <ion-icon name={props.icon} title={props.title}></ion-icon>\n    </BlankTargetLink>\n  );\n};\n\nexport default BlankTargetIconLink;\n","import React from 'react';\n\nimport BlankTargetIconLink from '../shared/blank-target-icon-link/BlankTargetIconLink';\n\nimport './Footer.scss';\n\nconst Footer = () => {\n  return (\n    <footer>\n      <div>\n        {'2019 Ⓒ'}\n        {' - '}\n\n        {'(+57) 305 772 4370'}\n        {' - '}\n\n        <BlankTargetIconLink\n          href=\"https://johncol.github.io/resume\"\n          icon=\"person\"\n          title=\"Resume\"\n        />\n\n        <BlankTargetIconLink\n          href=\"mailto:john.19col+web-profile@gmail.com\"\n          icon=\"mail-open\"\n          title=\"Mail\"\n        />\n\n        <BlankTargetIconLink\n          href=\"https://www.linkedin.com/in/john-cely\"\n          icon=\"logo-linkedin\"\n          title=\"LinkedIn\"\n        />\n\n        <BlankTargetIconLink\n          href=\"https://github.com/johncol\"\n          icon=\"logo-github\"\n          title=\"GitHub\"\n        />\n\n        <BlankTargetIconLink\n          href=\"https://codepen.io/johncol\"\n          icon=\"logo-codepen\"\n          title=\"CodePen\"\n        />\n\n        <BlankTargetIconLink\n          href=\"https://profile.codersrank.io/user/johncol\"\n          icon=\"code\"\n          title=\"CodersRank\"\n        />\n      </div>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import React from 'react';\n\nimport DefaultHeader from '../header/DefaultHeader';\nimport Navigation from '../navigation/Navigation';\nimport Footer from '../footer/Footer';\n\nimport './Page.scss';\n\nconst Page = props => {\n  return (\n    <div className=\"page\">\n      <header>\n        {props.header || <DefaultHeader />}\n        <Navigation />\n      </header>\n\n      <main>{props.children}</main>\n\n      <Footer />\n    </div>\n  );\n};\n\nexport default Page;\n","import React from 'react';\n\nimport photo from './photo.jpg';\nimport './Photo.scss';\n\nconst Photo = () => {\n  return (\n    <div className=\"photo\">\n      <img src={photo} alt=\"John's Profile\" />\n    </div>\n  );\n};\n\nexport default Photo;\n","import React from 'react';\n\nimport Page from '../page/Page';\nimport Photo from '../photo/Photo';\n\nimport './Home.scss';\n\nconst Home = () => {\n  return (\n    <Page>\n      <div className=\"content\">\n        <Photo />\n        <article>\n          <p>I am John Cely.</p>\n          <p>\n            I am a software developer with 7+ years of experience working with java and\n            angular, and most recently with go and react.\n          </p>\n          <p>\n            I love coding, that's my hobby and my job, and I do it in the best way I’m\n            able to, keeping code clean, readable, with meaningful tests, and split into\n            small pieces that make sense.\n          </p>\n        </article>\n      </div>\n    </Page>\n  );\n};\n\nexport default Home;\n","import React from 'react';\n\nimport Page from '../page/Page';\n\nconst Work = () => {\n  return (\n    <Page>\n      <article>\n        <p>\n          I currently work as a fullstack engineer at Twilio, where, along with my 3\n          people team, we tackle most of software development cicle: write proposals that\n          address product requirements and technical needs, plan the implementation of\n          those proposals by creating and prioritizing user stories, develop, test and\n          deploy the applications, and support them in case of any type of service\n          degradation.\n        </p>\n        <p>\n          I'm interested in discovering front end technologies, libraries and new language\n          features. I like TypeScript over Javascript, types tell us a lot about the code\n          we read, they let us know many things regarding what to expect from an object\n          without the need of looking at all the calls stack it was passed by to really\n          understand its true shape.\n        </p>\n        <p>\n          I haven't had the chance to check and build something with GraphQL, and it looks\n          very promising, so that's the next PoC I want to code, I'll make sure to share\n          the result here.\n        </p>\n      </article>\n    </Page>\n  );\n};\n\nexport default Work;\n","import React from 'react';\n\nimport './LinksList.scss';\n\nconst LinksList = props => {\n  const children = !props.children\n    ? []\n    : !Array.isArray(props.children)\n    ? [props.children]\n    : props.children;\n\n  return (\n    <ul className=\"browser-default links-list\">\n      {children.map(child => (\n        <li key={child.props.name}>{child}</li>\n      ))}\n    </ul>\n  );\n};\n\nexport default LinksList;\n","import React from 'react';\n\nimport BlankTargetLink from '../blank-target-link/BlankTargetLink';\n\nconst LinksListItem = props => {\n  return (\n    <section>\n      <h6>\n        <BlankTargetLink href={props.link}>{props.name}</BlankTargetLink>\n      </h6>\n      <p>{props.children}</p>\n    </section>\n  );\n};\n\nexport default LinksListItem;\n","import React from 'react';\n\nimport Page from '../page/Page';\nimport LinksList from '../shared/links-list/LinksList';\nimport LinksListItem from '../shared/links-list-item/LinksListItem';\n\nconst Showcase = () => {\n  return (\n    <Page>\n      <p>\n        I have built several toy apps and web pages as a hobby and as part courses that I\n        have taken. I'll list here the ones that are worth it:\n      </p>\n\n      <LinksList>\n        <LinksListItem\n          name=\"Would you rather?\"\n          link=\"https://johncol.github.io/nano-degree-would-you-rather\"\n        >\n          Sample react+redux project that allows users to post and answer questions and\n          see statistics. Use johndoe as user and password to check it working.\n        </LinksListItem>\n\n        <LinksListItem\n          name=\"Click the canvas\"\n          link=\"https://johncol.github.io/click-the-canvas\"\n        >\n          Simple html/javascript program that interacts with the user and draws some\n          geometrical shapes\n        </LinksListItem>\n\n        <LinksListItem name=\"Trillo\" link=\"https://johncol.github.io/css-course-trillo\">\n          Simple webpage built using flexbox\n        </LinksListItem>\n\n        <LinksListItem name=\"Natours\" link=\"https://johncol.github.io/css-course-natours\">\n          Beautiful web page showcasing many interesting CSS3 features and techniques\n        </LinksListItem>\n\n        <LinksListItem name=\"Nexter\" link=\"https://johncol.github.io/css-course-nexter\">\n          Awesome webpage to showcase how to use CSS3 grids to build your site layout\n        </LinksListItem>\n      </LinksList>\n    </Page>\n  );\n};\n\nexport default Showcase;\n","import React from 'react';\n\nimport Page from '../page/Page';\nimport LinksList from '../shared/links-list/LinksList';\nimport LinksListItem from '../shared/links-list-item/LinksListItem';\n\nconst Publications = () => {\n  return (\n    <Page>\n      <p>\n        I have only written one article so far, but that number will increase for sure in\n        the coming months:\n      </p>\n\n      <LinksList>\n        <LinksListItem\n          name=\"Test Driven Development and Angular\"\n          link=\"https://medium.com/@johncol/test-driven-development-and-angular-9110d62ce7ec\"\n        >\n          Here I explain, step by step, how to test/develop an angular service using TDD.\n          It contains an introduction of TDD and a code example for a service.\n        </LinksListItem>\n      </LinksList>\n    </Page>\n  );\n};\n\nexport default Publications;\n","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n\nimport Home from './home/Home';\nimport Work from './work/Work';\nimport Showcase from './showcase/Showcase';\nimport Publications from './publications/Publications';\n\nfunction App() {\n  return (\n    <BrowserRouter basename=\"/web-profile\">\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <Route exact path=\"/work\" component={Work} />\n        <Route exact path=\"/showcase\" component={Showcase} />\n        <Route exact path=\"/publications\" component={Publications} />\n        <Route component={Home} />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}